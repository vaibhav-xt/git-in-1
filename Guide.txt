Git is based on Unix based syntax.

Steps :-

1) Always First check\set username and user email to check type
	
	To Set :-
 
	i)  Name :- git config --global user.name (name)
	ii) Email :- git config --global user.email (name@gmail.com)

	To Check :-
	 
	i)  Name - git config --global user.name
	ii) Email - git config --global user.email

2) Now type " git init " to initialized empty repository 
3) " ls -lart " shows the hidden files in .git
4) " git status " to check status
5) Now to add to stage in Git file's like python or html or any file then type " git add (name of the file).
	[Note:- While adding the file must be in  the same directory] 
 
6) To Check git version then type "git --version"
7) To start any project we must commit it to file or to save (Initial Commit)
	Syntax :- git commit
		i)   After writing commit, Now if you write any text then add first write "Capital I" to insert
		ii)  After that, Here you can add message like "Initial Commit".
		iii) To Exit, then press Key :- first - Esc
						second - :
						third - w
						fourth - q
		Next Short Method To commit-
			i) First type "git commit -m ""(add message in inverted comma)"		


8) If we write " git status " it says that working tree clean (means its ok now can go for next step).

9) Now if you want to create any file using git bash then type txt " touch (name of the file) ". 
   Here touch is used to create new files.

10) Lets Say, You have more than thousand of file to add to stage then you cant do one by one which is very difficult.
    This time you can write the text " git add -A " it will add all the files

11) Must remember that you always check status because if there is any change in file then you get know immidiately.

12) If you want to clear terminal than type "clear". It clear the terminal.

14) Now if you have updated the file or by mistake you have deleted and get save by the user then type "git checkout (name of the file)"
    It will copy the deleted files.
	
	If you have many file to create a backup than type "git checkout -f".

15) If you want to check the commit than type "git log".  It shows all the files.

16) Now if you want to check a specific location of commit than type " git log -p -(how many no. of commit)

17) " git diff " syntax show the difference that added and removed.

18) Now if we write a command "git diff --staged" than it will compare with the last commit. 

19) If you have a problem like this "Another git process seems to be running in this repository"
    then type the command  "rm .git/index.lock"

20) If you want to commit directly without going to staged then type syntax " git commit -a -m "write meassage".

21) If you want to delete the file from the directory (note that this means that file is not deleting from the system its only deleting from the git dircectory) 
    the syntax is " git rm --cached (name of the file) ". To delete completely from the system then write syntax " git rm (name of the file) ".

22) Now another method to check status i.e. this method is short the synatx is " git status -s ". 
    After running the command you can see that there two M :- Here first(means Green) M shows that staged file is Modified.
    Red M show that file is modified in working directory.

23) Now lets talk about how to ignore the file: -    1) first make ignore file by typing " touch .gitignore ".
						     2) Now the file that you want to ignore if write the file name
							with extension in the ignore file i.e, .gitignore after that save the files.
						     3) then get into the staged. Here you can see that ignore files are not staged

24) Now if you want create a branch the type the syntax "git branch (name of the file)".

25) After creating the file, want to switch on that file then type text "git checkout (name of the file)"

26) Now if want to check in which branch we are at the present then write the syntax "git branch" it shows the present branch
 
27) If you want to do the above step in oneline then write the syntax "git checkout -b (name of the file)".

Git Hub :-

1) Make an account on github. Make a new repository.
2) After that copy the remote url and past to git bash here and then run it.
3) After if you want to check how many remote are there in git bash then write syntax "git remote"
3) Also to see the url of push and pull. write the syntax "git remote -v", it shows the url.



 